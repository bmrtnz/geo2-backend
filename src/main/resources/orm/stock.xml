<?xml version="1.0" encoding="utf-8"?>
<entity-mappings version="2.1"
  xmlns="http://xmlngeo_stock.jcp.org/xml/ns/persistence/orm"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://xmlngeo_stock.jcp.org/xml/ns/persistence/orm
http://xmlngeo_stock.jcp.org/xml/ns/persistence/orm_2_1.xsd">

   <!-- SELECTION D'ARTICLES PAR LE STOCK -->
  <named-native-query
    name="Stock.allStockArticle"
    result-class="fr.microtec.geo2.persistance.entity.stock.GeoStockArticle"
  >
    <query>
    <![CDATA[
            SELECT rownum, REST.* FROM(
      SELECT
        geo_stock.art_ref,
        geo2_art_desc.art_desc_long_ref,
        geo2_art_desc.art_bio,
        geo_stock.age,
        avi_art_gestion.valide,
        avi_art_cdc.esp_code,
        avi_art_mat_prem.var_code,
        geo_article.caf_code,
        avi_art_normalisation.cam_code,
        avi_art_cdc.cat_code,
        avi_art_emballage.col_code,
        avi_art_mat_prem.ori_code,
        geo_stock.sto_ref,
        geo_stock.fou_code,
        geo_stock.prop_code,
        geo_stock.sto_desc,
        geo_stock.date_fab,
        geo_stock.sto_statut,
        geo_stock.date_statut,
        geo_stock.pal_code,
        geo_stock_consolid.commentaire,
        DECODE (geo_stock.age,
        '1',
        SUM (geo_stock.qte_ini),
        0) "qte_ini_1",
        DECODE (geo_stock.age,
        '1',
        SUM (geo_stock.qte_res),
        0) "qte_res_1",
        DECODE (geo_stock.age || geo_stock.sto_statut,
        '1O',
        SUM (geo_stock.qte_ini),
        0)

                    "qte_opt_1",
        DECODE (geo_stock.age,
        '2',
        SUM (geo_stock.qte_ini),
        0) "qte_ini_2",
        DECODE (geo_stock.age,
        '2',
        SUM (geo_stock.qte_res),
        0) "qte_res_2",
        DECODE (geo_stock.age || geo_stock.sto_statut,
        '2O',
        SUM (geo_stock.qte_ini),
        0)

                    "qte_opt_2",
        DECODE (geo_stock.age,
        '3',
        SUM (geo_stock.qte_ini),
        0) "qte_ini_3",
        DECODE (geo_stock.age,
        '3',
        SUM (geo_stock.qte_res),
        0) "qte_res_3",
        DECODE (geo_stock.age || geo_stock.sto_statut,
        '3O',
        SUM (geo_stock.qte_ini),
        0)

                    "qte_opt_3",
        DECODE (geo_stock.age,
        '4',
        SUM (geo_stock.qte_ini),
        0) "qte_ini_4",
        DECODE (geo_stock.age,
        '4',
        SUM (geo_stock.qte_res),
        0) "qte_res_4",
        DECODE (geo_stock.age || geo_stock.sto_statut,
        '4O',
        SUM (geo_stock.qte_ini),
        0)

                    "qte_opt_4",
        geo_stock_hebdo.QTE_HEBDO
      FROM
        geo_stock,
        geo_stock_consolid,
        geo_stock_hebdo,
        geo_article,
        geo_fourni,
        avi_art_gestion,
        avi_art_mat_prem,
        avi_art_cdc,
        avi_art_emballage,
        avi_art_normalisation,
        geo2_art_desc,
        geo_colis
      WHERE
        avi_art_gestion.art_ref = geo_stock.art_ref
        AND geo_fourni.fou_code (+) = geo_stock.fou_code
        AND geo_stock.art_ref (+) = geo_article.art_ref
        AND avi_art_mat_prem.ref_mat_prem (+) = avi_art_gestion.ref_mat_prem
        AND avi_art_cdc.ref_cdc (+) = avi_art_gestion.ref_cdc
        AND avi_art_emballage.ref_emballage (+) = avi_art_gestion.ref_emballage
        AND geo_colis.col_code (+) = avi_art_emballage.col_code
        AND avi_art_normalisation.ref_normalisation (+) = avi_art_gestion.ref_normalisation
        AND geo_article.art_ref (+) = geo2_art_desc.art_ref
        AND geo_stock_consolid.art_ref (+) = geo_stock.art_ref
        AND geo_stock_hebdo.art_ref (+) = geo_stock.art_ref
        AND geo_stock.STO_REF_FROM IS NULL
        AND avi_art_cdc.esp_code LIKE :arg_espece
        AND avi_art_mat_prem.var_code LIKE :arg_variete
        AND avi_art_mat_prem.ori_code LIKE :arg_origine
        AND avi_art_mat_prem.mode_culture LIKE :arg_mode_culture
        AND avi_art_emballage.col_code LIKE :arg_emballage
        AND geo_fourni.bac_code LIKE :arg_bureau_achat
        AND geo_colis.gem_code LIKE :arg_groupe_emballage
      GROUP BY
        geo_stock.art_ref,
        geo2_art_desc.art_desc_long_ref,
        geo2_art_desc.art_bio,
        geo_stock.age,
        avi_art_gestion.valide,
        avi_art_cdc.esp_code,
        avi_art_mat_prem.var_code,
        geo_article.caf_code,
        avi_art_normalisation.cam_code,
        avi_art_cdc.cat_code,
        avi_art_emballage.col_code,
        avi_art_mat_prem.ori_code,
        geo_stock.STO_REF,
        geo_stock.fou_code,
        geo_stock.PROP_CODE,
        geo_stock.STO_DESC,
        geo_stock.DATE_FAB,
        geo_stock.STO_STATUT,
        geo_stock.DATE_STATUT,
        geo_stock.PAL_CODE,
        geo_stock_consolid.commentaire,
        geo_stock_hebdo.QTE_HEBDO
        ) REST
    ]]>
    </query>
  </named-native-query>

   <!-- SELECTION POUR RESERVATION A LA LIGNE -->
  <named-native-query
    name="Stock.allStockReservation"
    result-class="fr.microtec.geo2.persistance.entity.stock.GeoStockReservation"
  >
    <query>
    <![CDATA[
      SELECT
        rownum,
        STV.fou_code,
        STV.prop_code,
        SUM(STV.qte_ini) as qte_ini,
        SUM(STV.qte_res) as qte_res,
        STV.desc_stat as option_stock,
        STV.pal_code,
        SUM(STV.qte_ini_1) as ini1,
        SUM(STV.qte_res_1) as res1,
        SUM(STV.qte_ini_2) as ini2,
        SUM(STV.qte_res_2) as res2,
        SUM(STV.qte_ini_3) as ini3,
        SUM(STV.qte_res_3) as res3,
        SUM(STV.qte_ini_4) as ini4,
        SUM(STV.qte_res_4) as res4,
        STV.date_fab,
        STV.sto_ref
    FROM
    (
        SELECT
            GEO_STOCK.fou_code,
            GEO_STOCK.prop_code,
            SUM(GEO_STOCK.qte_ini) AS qte_ini,
            SUM(GEO_STOCK.qte_res) AS qte_res,
            DECODE(sto_statut,'O',sto_desc,'') AS desc_stat,
            GEO_STOCK.pal_code,
            DECODE(GEO_STOCK.age, '1', SUM(GEO_STOCK.qte_ini), 0) AS qte_ini_1,
            DECODE(GEO_STOCK.age, '1', SUM(GEO_STOCK.qte_res), 0) AS qte_res_1,
            DECODE(GEO_STOCK.age, '2', SUM(GEO_STOCK.qte_ini), 0) AS qte_ini_2,
            DECODE(GEO_STOCK.age, '2', SUM(GEO_STOCK.qte_res), 0) AS qte_res_2,
            DECODE(GEO_STOCK.age, '3', SUM(GEO_STOCK.qte_ini), 0) AS qte_ini_3,
            DECODE(GEO_STOCK.age, '3', SUM(GEO_STOCK.qte_res), 0) AS qte_res_3,
            DECODE(GEO_STOCK.age, '4', SUM(GEO_STOCK.qte_ini), 0) AS qte_ini_4,
            DECODE(GEO_STOCK.age, '4', SUM(GEO_STOCK.qte_res), 0) AS qte_res_4,
            GEO_STOCK.date_fab,
            GEO_STOCK.sto_ref
        FROM
            GEO_STOCK
        WHERE
            GEO_STOCK.art_ref = :arg_art_ref and
            GEO_STOCK.valide ='O'
        GROUP BY
            GEO_STOCK.fou_code,GEO_STOCK.pal_code, DECODE(sto_statut,'O',sto_desc,''), GEO_STOCK.age, GEO_STOCK.prop_code, GEO_STOCK.date_fab, GEO_STOCK.sto_ref
    )  STV
    GROUP BY
        rownum,
        STV.fou_code,
        STV.desc_stat,
        STV.pal_code,
        STV.prop_code,
        STV.date_fab,
        STV.sto_ref
    ]]>
    </query>
  </named-native-query>

   <!-- SELECTION DES RESERVATIONS ACTIVE D'UNE LIGNE -->
  <named-native-query
    name="Stock.allLigneReservation"
    result-class="fr.microtec.geo2.persistance.entity.stock.GeoLigneReservation"
  >
    <query>
    <![CDATA[
        SELECT
            "GEO_STOMVT"."STM_REF",
            "GEO_STOMVT"."STO_REF",
            "GEO_STOMVT"."NOM_UTILISATEUR",
            "GEO_STOMVT"."MVT_TYPE",
            "GEO_STOMVT"."MVT_QTE",
            "GEO_STOMVT"."ORD_REF",
            "GEO_STOMVT"."MOD_DATE",
            "GEO_STOMVT"."MOD_USER",
            "GEO_STOMVT"."VALIDE",
            "GEO_STOMVT"."ART_REF",
            "GEO_STOMVT"."ORL_REF",
            "GEO_STOMVT"."STM_DESC",
            "GEO_ORDLIG"."FOU_CODE" as ligne_fournisseur_code,
            "GEO_STOCK"."FOU_CODE" as stock_fournisseur_code,
            "GEO_STOCK"."PROP_CODE",
            "GEO_STOCK"."STO_DESC",
            "GEO_STOCK"."QTE_INI",
            "GEO_STOCK"."QTE_RES",
            "GEO_STOCK"."PAL_CODE"
        FROM
            "GEO_ORDLIG",
            "GEO_STOMVT",
            "GEO_STOCK"
        WHERE
            ( geo_stomvt.orl_ref (+) = geo_ordlig.orl_ref) and
            ( "GEO_STOMVT"."STO_REF" = "GEO_STOCK"."STO_REF" ) and
            ( ( geo_ordlig.orl_ref = :arg_orl_ref ) )
    ]]>
    </query>
  </named-native-query>

  <named-native-query
    name="Stock.allStockPreca"
    result-class="fr.microtec.geo2.persistance.entity.stock.GeoPrecal"
  >
    <query>
    <![CDATA[
        SELECT *
        FROM "GEO_PRECAL",
            "GEO_PRECAL_MODEL",
            "GEO_MODE_CULTURE"
        WHERE
            ( "GEO_PRECAL"."VAR_CODE" = "GEO_PRECAL_MODEL"."VAR_CODE" ) AND
            ( "GEO_PRECAL"."CHOIX" = "GEO_PRECAL_MODEL"."CHOIX" ) AND
            ( "GEO_PRECAL"."COLO" = "GEO_PRECAL_MODEL"."COLO" ) AND
            ( "GEO_PRECAL"."SEMAINE" = :arg_semaine ) AND
            ( "GEO_PRECAL"."VAR_CODE" LIKE :arg_var_code ) AND
            ( "GEO_PRECAL"."FOU_CODE" LIKE :arg_fou_code ) AND
            "GEO_PRECAL_MODEL"."ESPECE" = :arg_espece  AND
            "GEO_PRECAL_MODEL"."MODE_CULTURE" = "GEO_MODE_CULTURE"."REF" AND
            "GEO_MODE_CULTURE"."REF" like :arg_mode_culture
        ORDER BY "GEO_PRECAL"."VAR_CODE" ASC,
            "GEO_PRECAL"."CHOIX" ASC,
            "GEO_MODE_CULTURE"."REF" ASC,
            "GEO_PRECAL"."COLO" ASC,
            "GEO_PRECAL"."FOU_CODE" ASC
    ]]>
    </query>
  </named-native-query>

  <named-native-query
    name="Stock.allPrecaEspece"
  >
    <query>
    <![CDATA[
        SELECT
            DISTINCT
        PM.ESPECE
        FROM
            GEO_PRECAL_MODEL PM
        ORDER BY
            PM.ESPECE
    ]]>
    </query>
  </named-native-query>

  <named-native-query
    name="Stock.allPrecaVariete"
    result-class="fr.microtec.geo2.persistance.entity.stock.GeoPrecalModelVariete"
  >
    <query>
    <![CDATA[
        SELECT
            PM.VAR_CODE AS VAR_CODE,
            V.VAR_DESC AS VAR_DESC
        FROM
            GEO_VARIET V,
            GEO_PRECAL_MODEL PM
        WHERE
            V.VAR_CODE (+)= PM.VAR_CODE
            AND
        PM.ESPECE = :arg_espece
        GROUP BY
            PM.VAR_CODE,
            V.VAR_DESC
        ORDER BY
            PM.VAR_CODE ASC
    ]]>
    </query>
  </named-native-query>

  <named-native-query
    name="Stock.allDetailStockResa"
    result-class="fr.microtec.geo2.persistance.entity.stock.GeoDetailStockResa"
  >
    <query>
    <![CDATA[
        SELECT rownum, rest.* FROM (
            SELECT
                S.STO_REF,
                M.STM_REF,
                A.ART_REF
            FROM
                GEO_STOCK S,
                GEO_STOMVT M,
                GEO_ARTICLE A
            WHERE
                M.sto_ref (+)= S.sto_ref
                AND

            A.ART_REF = S.ART_REF
                AND

            S.fou_code LIKE :arg_fou_code
                AND

            S.art_ref LIKE :arg_art_ref
        ) rest
    ]]>
    </query>
  </named-native-query>

</entity-mappings>
