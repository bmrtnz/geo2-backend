<?xml version="1.0" encoding="utf-8"?>
<entity-mappings version="2.1"
  xmlns="http://xmlns.jcp.org/xml/ns/persistence/orm"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/persistence/orm
http://xmlns.jcp.org/xml/ns/persistence/orm_2_1.xsd">

  <!-- PLANNING TRANSPORTEUR -->
  <named-native-query
    name="Ordre.allPlanningTransporteurs"
    result-class="fr.microtec.geo2.persistance.entity.ordres.GeoPlanningTransporteur"
  >
    <query>
    <![CDATA[
      SELECT ROWNUM, rest.*
      FROM (
      SELECT
      CEIL(
        sum(
          case
            geo_ordlig.PAL_NB_COL
            when 0 then geo_ordlig.cde_nb_pal
            else (
              case
                when geo_ordlig.DEMIPAL_IND = 1
                OR geo_ordlig.PAL_NB_PALINTER > 0 then geo_ordlig.CDE_NB_COL / (geo_ordlig.PAL_NB_COL * 2)
                else geo_ordlig.CDE_NB_COL / geo_ordlig.PAL_NB_COL
              END
            )
          END
        )
      ) as somme_colis_palette,
      sum(geo_ordlig.cde_nb_col) as somme_colis_commandes,
      round(
        sum(
          case
            geo_ordlig.PAL_NB_COL
            when 0 then geo_ordlig.cde_nb_pal
            else (
              case
                when geo_ordlig.DEMIPAL_IND = 1
                OR geo_ordlig.PAL_NB_PALINTER > 0 then geo_ordlig.CDE_NB_COL / (geo_ordlig.PAL_NB_COL * 2)
                else geo_ordlig.CDE_NB_COL / geo_ordlig.PAL_NB_COL
              END
            )
          END
        ),
        2
      ) as somme_colis_palette_bis,
      geo_ordre.ord_ref,
      geo_ordre.code_chargement,
      geo_entrep.cen_code,
      geo_entrep.raisoc,
      geo_entrep.zip as ezip,
      geo_entrep.ville,
      geo_entrep.pay_code as epay,
      geo_ordre.nordre,
      geo_ordlog.datdep_fou_p,
      geo_fourni.zip,
      geo_fourni.pay_code,
      geo_ordlog.datdep_grp_p,
      geo_ordlog.grp_code,
      avi_art_mat_prem.esp_code,
      geo_ordlig.pal_code,
      geo_ordre.version_ordre,
      geo_ordre.trp_code,
      GEO_ORDRE.LIVDATP,
      'O' "flag_entrepot",
      avi_art_emballage.col_code,
      geo_ordre.ref_cli,
      geo_ordlog.fou_code
    FROM
      geo_entrep,
      geo_ordlig,
      geo_ordlog,
      geo_ordre,
      avi_art_gestion,
      avi_art_mat_prem,
      avi_art_emballage,
      geo_fourni
    WHERE
      geo_entrep.cen_ref = geo_ordre.cen_ref
      and geo_ordlig.ord_ref = geo_ordre.ord_ref
      and geo_ordlog.ord_ref = geo_ordlig.ord_ref
      and geo_ordlog.fou_code = geo_ordlig.fou_code
      and avi_art_gestion.art_ref = geo_ordlig.art_ref
      and avi_art_mat_prem.ref_mat_prem = avi_art_gestion.ref_mat_prem
      and avi_art_emballage.ref_emballage = avi_art_gestion.ref_emballage
      and geo_ordlog.datdep_fou_p between :arg_date_min
      and :arg_date_max
      and geo_ordre.soc_code like :arg_soc_code
      and (
        geo_ordre.trp_code = :arg_trp_code
        or geo_ordlog.trp_code = :arg_trp_code
      )
      and geo_ordlog.fou_code =geo_fourni.fou_code
    GROUP by
      geo_ordre.ord_ref,
      geo_ordre.code_chargement,
      geo_entrep.cen_code,
      geo_entrep.raisoc,
      geo_entrep.zip,
      geo_entrep.ville,
      geo_entrep.pay_code,
      geo_ordre.nordre,
      geo_ordlog.datdep_fou_p,
      geo_ordlog.fou_code,
      geo_fourni.zip,
      geo_fourni.pay_code,
      geo_ordlog.datdep_grp_p,
      geo_ordlog.grp_code,
      avi_art_mat_prem.esp_code,
      geo_ordlig.pal_code,
      geo_ordre.version_ordre,
      geo_ordre.trp_code,
      geo_ordre.livdatp,
      avi_art_emballage.col_code,
      geo_ordre.ref_cli) rest
    ]]>
    </query>
  </named-native-query>

  <named-native-query
    name="Ordre.allPlanningDepartMaritime"
    result-class="fr.microtec.geo2.persistance.entity.ordres.GeoPlanningDepartMaritime"
  >
    <query>
    <![CDATA[
        SELECT rownum, rest.*
        FROM (
            SELECT
                to_char(geo_ordlog.datdep_fou_p,'yymmdd') as datdep_fou_p_raw,
                geo_ordlog.datdep_fou_p,
                sum(geo_ordlig.cde_nb_pal) as cde_nb_pal,
                geo_ordlog.fou_code,
                geo_ordre.cli_code,
                geo_ordre.cen_code,
                geo_entrep.raisoc,
                geo_entrep.ville,
                geo_entrep.pay_code,
                geo_ordre.trp_code,
                geo_ordre.nordre,
                geo_ordre.ref_logistique,
                CASE WHEN geo_ordlog.immatriculation IS NOT NULL THEN geo_ordlog.immatriculation || ' ' ELSE '' END ||
                CASE WHEN geo_ordlog.container IS NOT NULL THEN geo_ordlog.container || ' ' ELSE '' END ||
                CASE WHEN geo_ordlog.plomb IS NOT NULL THEN 'PLOMB ' || geo_ordlog.plomb  || ' ' ELSE '' END ||
                CASE WHEN geo_ordlog.DETECTEUR_TEMP IS NOT NULL THEN 'DETECTEUR TEMP. ' || geo_ordlog.DETECTEUR_TEMP ELSE '' END as full_ref_logistique
            FROM geo_ordre,
                geo_ordlig,
                geo_ordlog,
                geo_entrep
        WHERE ( geo_ordlig.ord_ref = geo_ordre.ord_ref ) and
                ( geo_ordlog.ord_ref = geo_ordre.ord_ref ) and
                ( geo_entrep.cen_ref = geo_ordre.cen_ref ) and
                ( ( geo_ordre.sco_code in ('MAR','AFA') ) AND
                ( geo_ordre.soc_code = :arg_soc_code ) AND
                ( geo_ordlog.datdep_fou_p between :arg_date_min and :arg_date_max )
                )   AND geo_ordre.flannul = 'N'
        GROUP BY
                    to_char(geo_ordlog.datdep_fou_p,'yymmdd'),
                geo_ordre.nordre,
                geo_ordre.cli_code,
                geo_ordre.cen_code,
                geo_entrep.raisoc,
                geo_entrep.ville,
                geo_entrep.pay_code,
                geo_ordre.ref_logistique,
                geo_ordlog.immatriculation,
                geo_ordlog.container,
                geo_ordlog.plomb,
                geo_ordlog.DETECTEUR_TEMP,
                geo_ordlog.datdep_fou_p,
                geo_ordlog.fou_code,
                geo_ordre.trp_code
        ORDER BY   to_char(geo_ordlog.datdep_fou_p,'yymmdd') ASC,
                geo_ordlog.fou_code ASC,
                geo_ordlog.datdep_fou_p ASC,
                geo_ordre.nordre ASC ) rest
            ]]>
    </query>
  </named-native-query>

  <named-native-query
    name="Ordre.allLignesChargement"
    result-class="fr.microtec.geo2.persistance.entity.ordres.GeoLigneChargement"
  >
    <query>
    <![CDATA[
      SELECT DISTINCT
        O.CODE_CHARGEMENT,
        O.ORD_REF,
        O.NORDRE,
        OL.FOU_CODE,
        O.CEN_CODE,
        O.DEPDATP,
        O.LIVDATP,
        OL.ART_REF,
        A.ART_ALPHA,
        C.COL_DESC,
        OL.CDE_NB_PAL,
        OL.CDE_NB_COL,
        OL.PAL_NB_COL,
        OL.ORL_REF,
        O.NUM_CAMION,
        O.ORDRE_CHARGEMENT,
        OLO.DATDEP_FOU_P
    FROM GEO_ORDRE O,
            GEO_ORDLIG OL,
            GEO_ARTICLE A,
            GEO_COLIS C,
            GEO_ORDLOG OLO
    WHERE    O.CODE_CHARGEMENT IS NOT NULL
    AND         O.CODE_CHARGEMENT = :arg_code_chargement
    AND       O.ORD_REF = OL.ORD_REF
    AND       OL.ART_REF = A.ART_REF
    AND       C.COL_CODE = A.COL_CODE
    AND       A.ESP_CODE = C.ESP_CODE
    AND       OLO.ORD_REF = O.ORD_REF
    AND     OLO.FOU_CODE = OL.FOU_CODE
    AND OLO.TYP_FOU = 'F'
    AND O.CAM_CODE     = :arg_cam_code
    order by
        O.CODE_CHARGEMENT,
        O.DEPDATP,
        O.NORDRE,
        A.ART_ALPHA
    ]]>
    </query>
  </named-native-query>

  <named-native-query name="Ordre.createChargement">
    <query>
    <![CDATA[
        INSERT INTO
        GEO_ORDRE (
            ORD_REF,
            SOC_CODE,
            CAM_CODE,
            NORDRE,
            PER_CODEASS,
            PER_CODECOM,
            CLI_REF,
            CLI_CODE,
            REF_CLI,
            CEN_REF,
            CEN_CODE,
            SCO_CODE,
            PAY_CODE,
            DEV_CODE,
            DEV_TX,
            INC_CODE,
            INC_LIEU,
            TRP_CODE,
            TRP_BTA_CODE,
            TRP_PU,
            TRP_PRIX_VISIBLE,
            REF_LOGISTIQUE,
            REF_DOCUMENT,
            TRS_CODE,
            TRS_BTA_CODE,
            TRS_PU,
            TRS_PRIX_VISIBLE,
            TRS_VILLE,
            CRT_CODE,
            CRT_BTA_CODE,
            CRT_PU,
            CRT_PRIX_VISIBLE,
            DEPDATP,
            LIVDATP,
            CREDAT,
            TVT_CODE,
            TVR_CODE,
            MPM_CODE,
            BPM_CODE,
            ENT_ECHNBJ,
            ENT_ECHLE,
            COV_CODE,
            REMSF_TX,
            REMHF_TX,
            FLEXP,
            FLLIV,
            FLBAF,
            FLFAC,
            INSTRUCTIONS_LOGISTIQUE,
            TTR_CODE,
            LIB_DLV,
            DEPDATP_ASC,
            FACTURE_AVOIR,
            FRAIS_PU,
            FRAIS_UNITE,
            FRAIS_DESC,
            FLAG_QP,
            FLAG_UDC,
            AVMEM,
            ACK_TRANSP,
            FLAG_PUBLIC,
            VENTE_COMMISSION,
            FLBAGQP,
            FLGENQP,
            FBAGUDC,
            FLGENUDC,
            INVOIC,
            REM_SF_TX_MDD,
            INVOIC_DEMAT,
            CAME_CODE,
            CAMF_CODE,
            COMMENT_TVA,
            CODE_CHARGEMENT,
            ETD_DATE,
            ETA_DATE,
            ETD_LOCATION,
            ETA_LOCATION
        )
    SELECT
        seq_ord_num.nextval,
        SOC_CODE,
        CAM_CODE,
        :arg_nordre,
        PER_CODEASS,
        PER_CODECOM,
        CLI_REF,
        CLI_CODE,
        REF_CLI,
        CEN_REF,
        CEN_CODE,
        SCO_CODE,
        PAY_CODE,
        DEV_CODE,
        DEV_TX,
        INC_CODE,
        INC_LIEU,
        TRP_CODE,
        TRP_BTA_CODE,
        TRP_PU,
        TRP_PRIX_VISIBLE,
        REF_LOGISTIQUE,
        REF_DOCUMENT,
        TRS_CODE,
        TRS_BTA_CODE,
        TRS_PU,
        TRS_PRIX_VISIBLE,
        TRS_VILLE,
        CRT_CODE,
        CRT_BTA_CODE,
        CRT_PU,
        CRT_PRIX_VISIBLE,
        DEPDATP,
        LIVDATP,
        CREDAT,
        TVT_CODE,
        TVR_CODE,
        MPM_CODE,
        BPM_CODE,
        ENT_ECHNBJ,
        ENT_ECHLE,
        COV_CODE,
        REMSF_TX,
        REMHF_TX,
        FLEXP,
        FLLIV,
        FLBAF,
        FLFAC,
        INSTRUCTIONS_LOGISTIQUE,
        TTR_CODE,
        LIB_DLV,
        DEPDATP_ASC,
        FACTURE_AVOIR,
        FRAIS_PU,
        FRAIS_UNITE,
        FRAIS_DESC,
        FLAG_QP,
        FLAG_UDC,
        AVMEM,
        ACK_TRANSP,
        FLAG_PUBLIC,
        VENTE_COMMISSION,
        FLBAGQP,
        FLGENQP,
        FBAGUDC,
        FLGENUDC,
        INVOIC,
        REM_SF_TX_MDD,
        INVOIC_DEMAT,
        CAME_CODE,
        CAMF_CODE,
        COMMENT_TVA,
        :arg_code_chargement,
        ETD_DATE,
        ETA_DATE,
        ETD_LOCATION,
        ETA_LOCATION
    FROM
        GEO_ORDRE
    WHERE
        ord_ref = :arg_ord_original_ref
    ]]>
    </query>
  </named-native-query>

</entity-mappings>
