<?xml version="1.0" encoding="utf-8"?>
<entity-mappings version="2.1"
  xmlns="http://xmlns.jcp.org/xml/ns/persistence/orm"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/persistence/orm
http://xmlns.jcp.org/xml/ns/persistence/orm_2_1.xsd">

    <named-native-query
        name="Client.allClientEnCours"
        result-class="fr.microtec.geo2.persistance.entity.tiers.GeoClientEnCours"
    >
        <query>
            <![CDATA[
            SELECT
                ROWNUM,
                SOC_CODE,
                CLI_REF,
                DEV_CODE,
                CPT_CODE,
                CFC_DATE_ECRITURE,
                CFC_DATE_ECHEANCE,
                CFC_SENS,
                CFC_MT_EUROS,
                CFC_MT_DEVISE,
                CFC_REF_PIECE,
                CFC_INTITULE,
                CFC_RAPPEL,
                ECH_NIV,
                CLI_CODE,
                RAISOC,
                ZIP,
                VILLE,
                PAY_CODE,
                ENC_ASSURE,
                ENC_REFERENCES,
                ENC_DEPASSE,
                ENC_DATE_VALID,
                ENC_BW,
                ENC_ACTUEL,
                CG_NUM,
                DATFAC,
                EC_PIECE,
                NUM_IMMAT,
                CEN_REF,
                ORD_REF,
                CONTAINER
            FROM
                (
                SELECT
                    DISTINCT
                    E.SOC_CODE,
                    E.CLI_REF,
                    E.DEV_CODE,
                    E.CPT_CODE,
                    E.CFC_DATE_ECRITURE,
                    E.CFC_DATE_ECHEANCE,
                    E.CFC_SENS,
                    E.CFC_MT_EUROS,
                    E.CFC_MT_DEVISE,
                    E.CFC_REF_PIECE,
                    E.CFC_INTITULE,
                    E.CFC_RAPPEL,
                    E.ECH_NIV,
                    C.CLI_CODE,
                    C.RAISOC,
                    C.ZIP,
                    C.VILLE,
                    C.PAY_CODE,
                    C.ENC_ASSURE,
                    C.ENC_REFERENCES,
                    C.ENC_DEPASSE,
                    C.ENC_DATE_VALID,
                    C.ENC_BW,
                    C.ENC_ACTUEL,
                    E.CG_NUM,
                    CASE
                        WHEN O.DATFAC IS NULL THEN E.CFC_DATE_ECRITURE
                        ELSE O.DATFAC
                    END AS DATFAC,
                    E.EC_PIECE,
                    D.DEV_CODE_REF,
                    D.DEV_TX,
                    CASE
                        WHEN L.immatriculation IS NOT NULL THEN L.immatriculation || ' '
                        ELSE ''
                    END AS NUM_IMMAT,
                    O.CEN_REF,
                    O.ORD_REF,
                    L.CONTAINER
                FROM
                    GEO_CLIENT_ENCOURS E,
                    GEO_CLIENT C,
                    GEO_ORDRE O,
                    GEO_ORDLOG L,
                    GEO_DEVISE_REF D
                WHERE
                    E.CLI_REF = C.CLI_REF
                    AND
                                E.CLI_REF = O.CLI_REF
                    AND
                                E.cli_ref =:ra_cli_ref
                    AND
                                substr(E.CFC_INTITULE, 3, 6) = O.NORDRE
                    AND
                                L.ORD_REF = O.ORD_REF
                    AND
                                ( O.DATECH = E.CFC_DATE_ECHEANCE
                        OR O.DATECH IS NULL)
                    AND
                                L.ORX_REF IN (
                    SELECT
                        MIN(ORX_REF)
                    FROM
                        GEO_ORDLOG
                    WHERE
                        GEO_ORDLOG.ORD_REF = O.ORD_REF)
                    AND
                                D.DEV_CODE_REF like :ra_dev_code_soc
                    AND
                                (D.DEV_CODE = E.DEV_CODE
                        OR ( E.DEV_CODE = 'FRF'
                            AND D.DEV_CODE = 'EUR'))
                GROUP BY
                    E.SOC_CODE,
                    E.CLI_REF,
                    E.DEV_CODE,
                    E.CPT_CODE,
                    E.CFC_DATE_ECRITURE,
                    E.CFC_DATE_ECHEANCE,
                    E.CFC_SENS,
                    E.CFC_MT_EUROS,
                    E.CFC_MT_DEVISE,
                    E.CFC_REF_PIECE,
                    E.CFC_INTITULE,
                    E.CFC_RAPPEL,
                    E.ECH_NIV,
                    C.CLI_CODE,
                    C.RAISOC,
                    C.ZIP,
                    C.VILLE,
                    C.PAY_CODE,
                    C.ENC_ASSURE,
                    C.ENC_REFERENCES,
                    C.ENC_DEPASSE,
                    C.ENC_DATE_VALID,
                    C.ENC_BW,
                    C.ENC_ACTUEL,
                    E.CG_NUM,
                    CASE
                        WHEN O.DATFAC IS NULL THEN E.CFC_DATE_ECRITURE
                        ELSE O.DATFAC
                    END,
                    E.EC_PIECE,
                    D.DEV_CODE_REF,
                    D.DEV_TX,
                    L.immatriculation,
                    O.CEN_REF,
                    O.ORD_REF,
                    L.CONTAINER
            UNION
                SELECT
                    DISTINCT
                                E.SOC_CODE,
                    E.CLI_REF,
                    E.DEV_CODE,
                    E.CPT_CODE,
                    E.CFC_DATE_ECRITURE,
                    E.CFC_DATE_ECHEANCE,
                    E.CFC_SENS,
                    E.CFC_MT_EUROS,
                    E.CFC_MT_DEVISE,
                    E.CFC_REF_PIECE,
                    E.CFC_INTITULE,
                    E.CFC_RAPPEL,
                    E.ECH_NIV,
                    C.CLI_CODE,
                    C.RAISOC,
                    C.ZIP,
                    C.VILLE,
                    C.PAY_CODE,
                    C.ENC_ASSURE,
                    C.ENC_REFERENCES,
                    C.ENC_DEPASSE,
                    C.ENC_DATE_VALID,
                    C.ENC_BW,
                    C.ENC_ACTUEL,
                    E.CG_NUM,
                    E.CFC_DATE_ECRITURE AS DATFAC,
                    E.EC_PIECE,
                    D.DEV_CODE_REF,
                    D.DEV_TX,
                    '' AS NUM_IMMAT,
                    '' AS CEN_REF,
                    '' AS ORD_REF,
                    '' AS CONTAINER
                FROM
                    GEO_CLIENT_ENCOURS E,
                    GEO_CLIENT C,
                    GEO_DEVISE_REF D
                WHERE
                    E.CLI_REF = C.CLI_REF
                    AND
                                E.cli_ref =:ra_cli_ref
                    AND
                                D.DEV_CODE_REF like :ra_dev_code_soc
                    AND
                                (D.DEV_CODE = E.DEV_CODE
                        OR ( E.DEV_CODE = 'FRF'
                            AND D.DEV_CODE = 'EUR'))
                    AND
                                NOT EXISTS (
                    SELECT
                        1
                    FROM
                        GEO_ORDRE O
                    WHERE
                        E.CLI_REF = O.CLI_REF
                        AND
                                substr(E.CFC_INTITULE, 3, 6) = O.NORDRE
                            AND
                                ( O.DATECH = E.CFC_DATE_ECHEANCE
                                OR O.DATECH IS NULL) )
                            )

        ]]>
        </query>
    </named-native-query>

    <named-native-query
        name="Client.allClientDepassementEnCours"
        result-class="fr.microtec.geo2.persistance.entity.tiers.GeoClientDepassementEnCours"
    >
        <query>
            <![CDATA[
            SELECT
                ROWNUM,
                "secteur_permanent",
                "secteur_temporaire",
                "secteur_bw",
                "secteur_autorise",
                "secteur_depasst",
                "secteur_solde",
                "secteur_non_echu",
                "secteur_1_30",
                "secteur_31_60",
                "secteur_61_90",
                "secteur_90",
                "secteur_COFACE",
                "pays_permanent",
                "pays_temporaire",
                "pays_bw",
                "pays_autorise",
                "pays_depasst",
                "pays_solde",
                "pays_non_echu",
                "pays_1_30",
                "pays_31_60",
                "pays_61_90",
                "pays_90",
                "pays_COFACE",
                GEO_CLIENT.SCO_CODE,
                GEO_PAYS.PAY_DESC,
                GEO_CLIENT.RAISOC,
                GEO_CLIENT.VILLE,
                GEO_CLIENT.ENC_BW,
                GEO_CLIENT.ENC_ACTUEL,
                GEO_CLIENT.ENC_0,
                GEO_CLIENT.ENC_1,
                GEO_CLIENT.ENC_2,
                GEO_CLIENT.ENC_3,
                GEO_CLIENT.ENC_4,
                GEO_CLIENT.ENC_ASSURE,
                GEO_CLIENT.ENC_DEPASSE,
                GEO_CLIENT.CLI_REF,
                GEO_CLIENT.ENC_DOUTEUX,
                GEO_CLIENT.ENC_DATE_VALID,
                GEO_CLIENT.ALERTE_COFACE,
                GEO_CLIENT.VALIDE
            FROM
                GEO_CLIENT,
                GEO_PAYS ,
                (
                SELECT
                    GEO_CLIENT.SOC_CODE,
                    GEO_CLIENT.SCO_CODE,
                    sum(geo_client.enc_assure) "secteur_permanent",
                    sum(geo_client.enc_depasse) "secteur_temporaire",
                    sum(geo_client.enc_bw) "secteur_bw",
                    sum(geo_client.enc_bw + geo_client.enc_assure + geo_client.enc_depasse ) "secteur_autorise",
                    sum(geo_client.enc_actuel - ( geo_client.enc_bw + geo_client.enc_assure + geo_client.enc_depasse)) "secteur_depasst",
                    sum(geo_client.enc_actuel) "secteur_solde",
                    sum(geo_client.enc_0) "secteur_non_echu",
                    sum(geo_client.enc_1) "secteur_1_30",
                    sum(geo_client.enc_2) "secteur_31_60",
                    sum(geo_client.enc_3) "secteur_61_90",
                    sum(geo_client.enc_4) "secteur_90",
                    sum(geo_client.alerte_coface) "secteur_COFACE"
                FROM
                    GEO_CLIENT,
                    GEO_PAYS
                WHERE
                    GEO_PAYS.PAY_CODE = GEO_CLIENT.PAY_CODE
                    AND

            geo_client.sco_code LIKE :secteur
                    AND

            (geo_client.enc_0 + geo_client.enc_1 + geo_client.enc_2 + geo_client.enc_3 + geo_client.enc_4) <> 0
                    AND

                geo_client.soc_code = :soc
                GROUP BY
                    GEO_CLIENT.SOC_CODE,
                    GEO_CLIENT.SCO_CODE ) secteur,
                (
                SELECT
                    GEO_CLIENT.SOC_CODE,
                    GEO_CLIENT.SCO_CODE,
                    GEO_CLIENT.PAY_CODE,
                    sum(geo_client.enc_assure) "pays_permanent",
                    sum(geo_client.enc_depasse) "pays_temporaire",
                    sum(geo_client.enc_bw) "pays_bw",
                    sum(geo_client.enc_bw + geo_client.enc_assure + geo_client.enc_depasse ) "pays_autorise",
                    sum(geo_client.enc_actuel - ( geo_client.enc_bw + geo_client.enc_assure + geo_client.enc_depasse)) "pays_depasst",
                    sum(geo_client.enc_actuel) "pays_solde",
                    sum(geo_client.enc_0) "pays_non_echu",
                    sum(geo_client.enc_1) "pays_1_30",
                    sum(geo_client.enc_2) "pays_31_60",
                    sum(geo_client.enc_3) "pays_61_90",
                    sum(geo_client.enc_4) "pays_90",
                    sum(geo_client.alerte_coface) "pays_COFACE"
                FROM
                    GEO_CLIENT,
                    GEO_PAYS
                WHERE
                    GEO_PAYS.PAY_CODE = GEO_CLIENT.PAY_CODE
                    AND
            geo_client.sco_code LIKE :secteur
                    AND

            (geo_client.enc_0 + geo_client.enc_1 + geo_client.enc_2 + geo_client.enc_3 + geo_client.enc_4) <> 0
                        AND

                geo_client.soc_code = :soc
                    GROUP BY
                        GEO_CLIENT.SOC_CODE,
                        GEO_CLIENT.SCO_CODE,
                        GEO_CLIENT.pay_code) pays
            WHERE
                GEO_PAYS.PAY_CODE = GEO_CLIENT.PAY_CODE
                AND

            geo_client.soc_code = :soc
                AND

            geo_client.sco_code LIKE :secteur
                AND

            (geo_client.enc_0 + geo_client.enc_1 + geo_client.enc_2 + geo_client.enc_3 + geo_client.enc_4) <> 0
                AND

                    secteur.soc_code = geo_client.soc_code
                AND

                secteur.sco_code = geo_client.sco_code
                AND

                    pays.soc_code = geo_client.soc_code
                AND

                pays.sco_code = geo_client.sco_code
                AND

                    pays.pay_code = geo_client.PAY_CODE
            ORDER BY
                GEO_CLIENT.SCO_CODE ASC,
                GEO_PAYS.PAY_DESC ASC,
                GEO_CLIENT.RAISOC ASC,
                GEO_CLIENT.VILLE ASC
        ]]>
        </query>
    </named-native-query>

</entity-mappings>
